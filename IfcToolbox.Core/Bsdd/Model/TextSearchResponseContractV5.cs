/* 
 * bSDD API prototype
 *
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TextSearchResponseContractV5
    /// </summary>
    [DataContract]
        public partial class TextSearchResponseContractV5 :  IEquatable<TextSearchResponseContractV5>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextSearchResponseContractV5" /> class.
        /// </summary>
        /// <param name="classifications">The list of Classifications found.</param>
        /// <param name="domains">domains.</param>
        /// <param name="properties">properties.</param>
        public TextSearchResponseContractV5(List<TextSearchResponseClassificationContractV5> classifications = default(List<TextSearchResponseClassificationContractV5>), List<TextSearchResponseDomainContractV5> domains = default(List<TextSearchResponseDomainContractV5>), List<TextSearchResponsePropertyContractV5> properties = default(List<TextSearchResponsePropertyContractV5>))
        {
            this.Classifications = classifications;
            this.Domains = domains;
            this.Properties = properties;
        }
        
        /// <summary>
        /// The list of Classifications found
        /// </summary>
        /// <value>The list of Classifications found</value>
        [DataMember(Name="classifications", EmitDefaultValue=false)]
        public List<TextSearchResponseClassificationContractV5> Classifications { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [DataMember(Name="domains", EmitDefaultValue=false)]
        public List<TextSearchResponseDomainContractV5> Domains { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<TextSearchResponsePropertyContractV5> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextSearchResponseContractV5 {\n");
            sb.Append("  Classifications: ").Append(Classifications).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextSearchResponseContractV5);
        }

        /// <summary>
        /// Returns true if TextSearchResponseContractV5 instances are equal
        /// </summary>
        /// <param name="input">Instance of TextSearchResponseContractV5 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextSearchResponseContractV5 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Classifications == input.Classifications ||
                    this.Classifications != null &&
                    input.Classifications != null &&
                    this.Classifications.SequenceEqual(input.Classifications)
                ) && 
                (
                    this.Domains == input.Domains ||
                    this.Domains != null &&
                    input.Domains != null &&
                    this.Domains.SequenceEqual(input.Domains)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Classifications != null)
                    hashCode = hashCode * 59 + this.Classifications.GetHashCode();
                if (this.Domains != null)
                    hashCode = hashCode * 59 + this.Domains.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
